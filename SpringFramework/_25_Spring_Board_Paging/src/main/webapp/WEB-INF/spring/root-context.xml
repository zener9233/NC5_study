<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- RootContext.xml 파일을 읽어서 스프링컨테이너 구동 시 
		 bean 태그로 된 클래스의 객체 자동 생성 
		 bean 객체: bean 태그로 등록된 클래스의 객체
		 bean 객체로 등록하는 클래스들은 라이브러리들의 객체를 생성할 때 등록
		 라이브러리들에는 개발자가 어노테이션으로 객체생성이 불가능하기 때문-->
	<!-- IOC(제어의 역전): 개발자가 직접 생성하던 객체를 스프링 설정 파일을 통해 스프링에 위임함 -->
	<!-- init-method: 자동 객체 생성 시 초기화 필요한 객체들은 초기화 메소드를 만들어서 매핑 -->
	<!-- destroy-method: 스프링 컨테이너에 의해 객체가 삭제되기 전에 수행할 동작을 작성한
						 메소드 매핑 -->
	<!-- lazy-init: 객체의 생성 시점을 설정. true 설정 시 객체 요청 시에 객체 생성 -->
	<!-- scope: 객체의 생성 방식을 지정. singleton, prototype 지정가능.
	            생성된 하나의 객체를 공유할 것인지 요청때마다 객체를 새로 생성할 것인지 결정 -->
	<!-- <bean id="kCar" class="com.bit.springboard.coupling.KiaCar"
	init-method="initMethod" destroy-method="destroyMethod"
	scope="prototype"></bean> -->
	
	<!-- constructor-arg: 생성자 호출에 넘겨줄 파라미터 지정 -->
	<!-- constructor-arg 엘리먼트 개수만큼에 알맞은 생성자를 찾아서 호출 -->
	<!-- property: name속성의 값과 동일한 변수명에 해당하는 변수의 setter 메소드를 자동 호출 -->
	<!-- <bean id="hCar" class="com.bit.springboard.coupling.HyundaiCar">
		<property name="carAudio" ref="appleCarAudio"></property>
		<property name="model" value="gv70"></property>
	</bean> -->
	
	<!-- property 엘리먼트 더 편하게 사용하기 -->
	<!-- namespace 탭에서 p 선택 후 저장 -->
	<!-- p: => property의 약자
		 p:변수명 => 해당 변수에 대한 세터 메소드 호출
		 -ref: 변수가 클래스 타입일 경우 bean 객체랑 매핑 -->
	<!-- <bean id="hCar" class="com.bit.springboard.coupling.HyundaiCar"
	p:carAudio-ref="sonyCarAudio" p:model="GV70">
	</bean> -->
	
	<!-- CarAudio carAudio = new CarAudio(); --><!-- 
	<bean id="sonyCarAudio" class="com.bit.springboard.coupling.SonyCarAudio"></bean>
	<bean id="appleCarAudio" class="com.bit.springboard.coupling.AppleCarAudio"></bean> -->
	
	<!-- component-scan: 스캔할 패키지를 지정하여 어노테이션으로 자동 객체 생성 -->
	<!-- com.bit.springboard.coupling 패키지 안에 @Component 어노테이션이 달린
		 클래스들만 찾아서 객체 생성 -->
	<context:component-scan base-package="com.bit.springboard.service"></context:component-scan>
	
	<!-- 라이브러리로 받아온 클래스에는 어노테이션을 추가할 수 없어서 bean 객체로 등록한다. -->
	<!-- AOP 관련 어노테이션들을 읽어서 AOP 구현 -->
	<!-- <aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
	
	<!-- 외부 파일 참조 -->
	<context:property-placeholder 
			location="classpath:config/db.properties"/>
	
	<!-- db 접속 객체인 dataSource bean 등록 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" 
				value="${jdbc.driver}"></property>
		<property name="url"
				value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
	<!-- DB 연결 객체들을 관리해주는 SessionFactory bean 등록 -->
	<bean id="sessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- MyBatis 설정파일 위치 지정 -->
		<property name="configLocation"
			value="classpath:sql-map-config.xml"></property>	
	</bean>
	
	<!-- SessionFactory에서 DB 연결 Session을 하나씩 꺼내서 사용할 
		 SessionTemplate bean 등록
	 -->	
	 <bean class="org.mybatis.spring.SqlSessionTemplate">
	 	<constructor-arg ref="sessionFactory"></constructor-arg>
	 </bean>
	
	<!-- 트랜잭션 설정(DDL 종료 후 자동으로 commit이나 rollback 호출) -->
	<!-- TransactionManager: 트랜잭션 자동 호출 관리 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- TransactionManager만 등록한다고 트랜잭션이 관리되진 않고
		 AOP로 어드바이스, 어드바이저 등을 설정해줘야 Transcation이 동작한다.     
	 -->
	 <tx:advice id="txAdvice" transaction-manager="txManager">
	 	<!-- 어떤 메소드에서 트랜잭션이 동작할지 설정 -->
	 	<tx:attributes>
	 		<!-- get으로 시작하는 메소드에서는 트랜잭션 실행하지 않음 -->
	 		<tx:method name="get*" read-only="true"/>
	 		<!-- get으로 시작하는 메소드를 제외한 모든 메소드에서 트랜잭션 실행 -->
	 		<tx:method name="*"/>
	 	</tx:attributes>
	 </tx:advice>
	
	<!-- AOP 설정으로 포인트컷과 어드바이저 설정 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.bit.springboard.service..*(..))" 
				id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
</beans>
