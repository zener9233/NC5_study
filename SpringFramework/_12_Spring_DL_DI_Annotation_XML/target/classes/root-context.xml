<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- RootContext.xml 파일을 읽어서 스프링컨테이너 구동 시 
		 bean 태그로 된 클래스의 객체 자동 생성 
		 bean 객체: bean 태그로 등록된 클래스의 객체
		 bean 객체로 등록하는 클래스들은 라이브러리들의 객체를 생성할 때 등록
		 라이브러리들에는 개발자가 어노테이션으로 객체생성이 불가능하기 때문-->
	<!-- IOC(제어의 역전): 개발자가 직접 생성하던 객체를 스프링 설정 파일을 통해 스프링에 위임함 -->
	<!-- init-method: 자동 객체 생성 시 초기화 필요한 객체들은 초기화 메소드를 만들어서 매핑 -->
	<!-- destroy-method: 스프링 컨테이너에 의해 객체가 삭제되기 전에 수행할 동작을 작성한
						 메소드 매핑 -->
	<!-- lazy-init: 객체의 생성 시점을 설정. true 설정 시 객체 요청 시에 객체 생성 -->
	<!-- scope: 객체의 생성 방식을 지정. singleton, prototype 지정가능.
	            생성된 하나의 객체를 공유할 것인지 요청때마다 객체를 새로 생성할 것인지 결정 -->
	<!-- <bean id="kCar" class="com.bit.springboard.coupling.KiaCar"
	init-method="initMethod" destroy-method="destroyMethod"
	scope="prototype"></bean> -->
	
	<!-- constructor-arg: 생성자 호출에 넘겨줄 파라미터 지정 -->
	<!-- constructor-arg 엘리먼트 개수만큼에 알맞은 생성자를 찾아서 호출 -->
	<!-- property: name속성의 값과 동일한 변수명에 해당하는 변수의 setter 메소드를 자동 호출 -->
	<!-- <bean id="hCar" class="com.bit.springboard.coupling.HyundaiCar">
		<property name="carAudio" ref="appleCarAudio"></property>
		<property name="model" value="gv70"></property>
	</bean> -->
	
	<!-- property 엘리먼트 더 편하게 사용하기 -->
	<!-- namespace 탭에서 p 선택 후 저장 -->
	<!-- p: => property의 약자
		 p:변수명 => 해당 변수에 대한 세터 메소드 호출
		 -ref: 변수가 클래스 타입일 경우 bean 객체랑 매핑 -->
	<!-- <bean id="hCar" class="com.bit.springboard.coupling.HyundaiCar"
	p:carAudio-ref="sonyCarAudio" p:model="GV70">
	</bean> -->
	
	<!-- CarAudio carAudio = new CarAudio(); --><!-- 
	<bean id="sonyCarAudio" class="com.bit.springboard.coupling.SonyCarAudio"></bean>
	<bean id="appleCarAudio" class="com.bit.springboard.coupling.AppleCarAudio"></bean> -->
	
	<!-- component-scan: 스캔할 패키지를 지정하여 어노테이션으로 자동 객체 생성 -->
	<!-- com.bit.springboard.coupling 패키지 안에 @Component 어노테이션이 달린
		 클래스들만 찾아서 객체 생성 -->
	<context:component-scan base-package="com.bit.springboard.coupling"></context:component-scan>
	
	<!-- 라이브러리로 받아온 클래스에는 어노테이션을 추가할 수 없어서 bean 객체로 등록한다. -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost:3306/studydb?serverTimezone=UTC"></property>
		<property name="username" value="study"></property>
		<property name="password" value="!dkdlxl1234"></property>
	</bean>
	
	
	
	
	
	
</beans>
